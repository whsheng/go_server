// Generated by the proto compiler.  DO NOT EDIT!
// author: limpo1989@gmail.com
// source: test.prot
// date  : 2014/02/20 11:53:59

package table

type TestData struct {
    Id       uint32    // 测试ID
    Index    uint16    // 测试序列
    Name     string    // 现用名
    Based struct {
        Age    uint16
        Gender uint16
    } // 基础数据
    NameList []string  // 曾用名列表
    Card struct {
        Number  string
        Date struct {
            Year   uint16
            Month  uint16
            Day    uint16
            Hour   uint16
            Minute uint16
            Second uint16
        }
        AgeList []uint16
    } // 卡片数据
    Xparent []struct {
        Child []struct {
            Node []string
        }
    } // 嵌套测试
}

// -------------------------------------------------------------------
//member methos of TestData
func (this *TestData) Key() uint64 {
    key := uint64(this.Id) << 16
    key |= uint64(this.Index)
    return key
}

func (this *TestData) SizeOf() int32 {
    return int32(54)
}

// ===================================================================
type TestDataManager struct {
    data []*TestData
}

//member methos of TestDataManager
func (this *TestDataManager) Source() string {
    return "test.tbl"
}

func (this *TestDataManager) Size() int {
    return len(this.data)
}

func (this *TestDataManager) Get( index int ) *TestData {
    if index >= this.Size() {
    	panic( "out of range" )
    }

    return this.data[index]
}

func (this *TestDataManager) Load(path string) bool {

    if this.Size() > 0 {
    	return true
    }

    loader := &TableLoader{}

    path += "/"
    path += this.Source()
    if result, ok := loader.Load( &TestData{}, path ); ok {

        for _, v := range( result ) {
        	this.data = append( this.data, v.(*TestData) )
        }

        return true
    }

    return false
}

func (this *TestDataManager) Find( key uint64 ) *TestData {

    if this.Size() <= 0 {
    	return nil
    }

    start	:= 0
    stop	:= int(this.Size() - 1)
    middle	:= 0

    for ; start <= stop ; {

    	middle = int( (start + stop) / 2 )

    	tbl := this.data[middle]

    	if tbl.Key() == key {
    		return tbl
    	}

    	if tbl.Key() > key {
    		stop = middle - 1
    	} else {
    		start = middle + 1
    	}
    }

    return nil
}

func (this *TestDataManager) FindEx( id uint32, index uint16 ) *TestData {
    key := uint64(id) << 16
    key |= uint64(index)

    return this.Find( key )
}

// ===================================================================
var gs_TestDataInstance = &TestDataManager{}

func GetTestDataManager() *TestDataManager {
	return gs_TestDataInstance
}

func init() {
	LoadTables( gs_TestDataInstance )
}
